{"version":3,"sources":["components/phoneBook/contactList/ContactList.module.css","components/phoneBook/PhoneBook.module.css","components/phoneBook/notification/Notification.module.css","components/phoneBook/empty/Empty.module.css","components/phoneBook/contactFilter/ContactFilter.module.css","redux/contacts/contactsActions.js","redux/contacts/contactsOperations.js","components/phoneBook/notification/Notification.js","components/phoneBook/empty/Empty.js","redux/contacts/contactsSelectors.js","components/phoneBook/contactForm/ContactForm.js","components/phoneBook/contactList/ContactList.js","components/phoneBook/contactFilter/ContactFilter.js","components/phoneBook/PhoneBook.js","components/App.js","redux/contacts/contactsReducers.js","redux/store.js","index.js","components/phoneBook/contactForm/ContactForm.module.css"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","removeContactRequest","removeContactSuccess","removeContactError","onHandleFilter","axios","defaults","baseURL","addContact","name","number","dispatch","contactsActions","post","then","response","data","catch","error","fetchContacts","get","removeContact","id","delete","Notification","className","Styles","NotificationWrapper","Empty","getContacts","state","contacts","contactList","getFilterValue","filter","getVisibleContacts","createSelector","contact","toLowerCase","includes","ContactForm","newContact","showAlert","showEmpty","handleChange","e","target","setState","value","handleSubmit","preventDefault","props","some","setTimeout","this","onSubmit","s","form","label","input","type","onChange","button","CSSTransition","in","timeout","classNames","unmountOnExit","Component","mapDispatchToProps","contactsOperations","connect","contactsSelectors","deleteContact","onHandleDelete","dataset","TransitionGroup","component","list","map","listItem","data-id","onClick","PhoneBook","onFetchContacts","appear","title","App","createReducer","action","payload","toString","_","combineReducers","store","configureStore","reducer","contactsReducers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1a7384ed.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__aa56E\",\"listItem\":\"ContactList_listItem__KY9ew\",\"button\":\"ContactList_button__jux15\",\"name\":\"ContactList_name__1s6BI\",\"enter\":\"ContactList_enter__2cg8l\",\"enterActive\":\"ContactList_enterActive__2fN_y\",\"exit\":\"ContactList_exit__7-qlQ\",\"exitActive\":\"ContactList_exitActive__W-a4I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"PhoneBook_appear__1B2Wf\",\"appearActive\":\"PhoneBook_appearActive__P2l4J\",\"title\":\"PhoneBook_title__3mJwX\",\"enter\":\"PhoneBook_enter__1Hfju\",\"enterActive\":\"PhoneBook_enterActive__2P5an\",\"exit\":\"PhoneBook_exit__1DrhP\",\"exitActive\":\"PhoneBook_exitActive__2sq7f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NotificationWrapper\":\"Notification_NotificationWrapper__2j2_n\",\"appear\":\"Notification_appear__1iL8e\",\"appearActive\":\"Notification_appearActive__3tKeZ\",\"exit\":\"Notification_exit__ypIFE\",\"exitActive\":\"Notification_exitActive__2--Dd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NotificationWrapper\":\"Empty_NotificationWrapper__2xkz5\",\"appear\":\"Empty_appear__1Ooa1\",\"appearActive\":\"Empty_appearActive__cG-pG\",\"exit\":\"Empty_exit__1AxK-\",\"exitActive\":\"Empty_exitActive__3QuSg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactFilter_input__2jgWr\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContactRequest = createAction('contacts/addRequest');\r\nconst addContactSuccess = createAction('contacts/addSuccess');\r\nconst addContactError = createAction('contacts/addError');\r\n\r\nconst fetchContactsRequest = createAction('contacts/fetchRequest');\r\nconst fetchContactsSuccess = createAction('contacts/fetchSuccess');\r\nconst fetchContactsError = createAction('contacts/fetchError');\r\n\r\nconst removeContactRequest = createAction('contacts/removeRequest');\r\nconst removeContactSuccess = createAction('contacts/removeSuccess');\r\nconst removeContactError = createAction('contacts/removeError');\r\n\r\nconst onHandleFilter = createAction(\"contacts/handleFilter\");\r\n\r\n// const addToLocalStorage = createAction(\"contacts/addToLocalStorage\");\r\n\r\nexport default {\r\n    onHandleFilter,\r\n    // addToLocalStorage,\r\n\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n\r\n    removeContactRequest,\r\n    removeContactSuccess,\r\n    removeContactError,\r\n}\r\n\r\n// const addContact = ({ name, number }) => ({\r\n//     type: actionTypes.ADD,\r\n//     payload: {\r\n//         contact: {\r\n//             id: uuidv4(),\r\n//             name,\r\n//             number,\r\n//         }\r\n//     }\r\n// })\r\n\r\n\r\n// const deleteContact = (id) => ({\r\n//     type: actionTypes.REMOVE,\r\n//     payload: {\r\n//         id,\r\n//     }\r\n// })\r\n\r\n// const onHandleFilter = (filter) => ({\r\n//     type: actionTypes.VALUE,\r\n//     payload: {\r\n//         filter,\r\n//     }\r\n// })\r\n\r\n","import contactsActions from './contactsActions';\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:2000';\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n    dispatch(contactsActions.addContactRequest());\r\n\r\n    axios\r\n        .post('/contacts', { name, number })\r\n        .then(response => {\r\n            dispatch(contactsActions.addContactSuccess(response.data));\r\n        })\r\n        .catch(error => dispatch(contactsActions.addContactError(error)))\r\n}\r\n\r\nconst fetchContacts = () => dispatch => {\r\n    dispatch(contactsActions.fetchContactsRequest());\r\n\r\n    axios\r\n        .get('/contacts')\r\n        .then(response => {\r\n            dispatch(contactsActions.fetchContactsSuccess(response.data));\r\n        })\r\n        .catch(error => dispatch(contactsActions.fetchContactsError(error)));\r\n}\r\n\r\nconst removeContact = id => dispatch => {\r\n    dispatch(contactsActions.removeContactRequest());\r\n\r\n    axios\r\n        .delete(`/contacts/${id}`)\r\n        .then(() => dispatch(contactsActions.removeContactSuccess(id)))\r\n        .catch(error => dispatch(contactsActions.removeContactError(error)));\r\n}\r\n\r\nexport default {\r\n    addContact,\r\n    fetchContacts,\r\n    removeContact,\r\n}","import React from 'react'\r\nimport Styles from './Notification.module.css'\r\n\r\nconst Notification = ({ name }) => {\r\n    return (\r\n        <div className={Styles.NotificationWrapper}>\r\n            {`${name} is already in Contacts`}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Notification;","import React from 'react'\r\nimport Styles from './Empty.module.css'\r\n\r\nconst Empty = () => {\r\n    return (\r\n        <div className={Styles.NotificationWrapper}>\r\n            {`ALL FIELDS MUST BE FILLED!`}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Empty;","import { createSelector } from '@reduxjs/toolkit'\r\n\r\nconst getContacts = state => state.contacts.contactList;\r\nconst getFilterValue = state => state.contacts.filter;\r\n\r\nconst getVisibleContacts = createSelector([getContacts, getFilterValue], (contactList, filter) => {\r\n    return contactList.filter(contact =>\r\n        contact.name.toLowerCase().includes(filter.toLowerCase()))\r\n});\r\n\r\n\r\nexport default {\r\n    getContacts,\r\n    getFilterValue,\r\n    getVisibleContacts,\r\n};\r\n\r\n\r\n// const getVisibleContacts = state => {\r\n//     const contactList = getContacts(state);\r\n//     const filter = getFilterValue(state).toLowerCase();\r\n\r\n//     return contactList.filter(contact =>\r\n//         contact.name.toLowerCase().includes(filter));\r\n\r\n// }\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\n// import contactsActions from \"../../../redux/contacts/contactsActions\";\r\nimport contactsOperations from \"../../../redux/contacts/contactsOperations\";\r\nimport Notification from '../notification/Notification';\r\nimport Empty from '../empty/Empty';\r\nimport contactsSelectors from '../../../redux/contacts/contactsSelectors';\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport s from './ContactForm.module.css';\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n        name: '',\r\n        number: '',\r\n        newContact: null,\r\n        showAlert: false,\r\n        showEmpty: false,\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     const contacts = localStorage.getItem(\"contacts\");\r\n\r\n    //     if (contacts) {\r\n    //         this.props.addToLocalStorage(JSON.parse(contacts));\r\n    //     }\r\n    // }\r\n\r\n    // componentDidUpdate(prevProps) {\r\n    //     const { contacts } = this.props;\r\n\r\n    //     if (prevProps.contacts !== contacts) {\r\n    //         localStorage.setItem(\"contacts\", JSON.stringify(contacts));\r\n    //     }\r\n    // }\r\n\r\n    handleChange = (e) => {\r\n        const name = e.target.name;\r\n        this.setState({ [name]: e.target.value })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (this.props.contacts.some(contact => contact.name === this.state.name)) {\r\n            this.setState({ newContact: this.state.name, showAlert: true })\r\n            setTimeout(() => {\r\n                this.setState({ showAlert: false })\r\n            }, 2500);\r\n\r\n        } else if (this.state.name === \"\" || this.state.contact === \"\") {\r\n            this.setState({ showEmpty: true })\r\n            setTimeout(() => {\r\n                this.setState({ showEmpty: false })\r\n            }, 2500);\r\n\r\n        } else {\r\n\r\n            this.props.addContact({ name: this.state.name, number: this.state.number })\r\n        }\r\n        this.setState({ name: '', number: \"\" })\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { newContact, showAlert, showEmpty } = this.state;\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit} className={s.form}>\r\n                    <label className={s.label}>\r\n                        Name\r\n                    <input className={s.input} name=\"name\" type=\"text\" value={this.state.name} onChange={this.handleChange}></input>\r\n                    </label>\r\n                    <label className={s.label}>\r\n                        Number\r\n                    <input className={s.input} name=\"number\" type=\"tel\" value={this.state.number} onChange={this.handleChange}></input>\r\n                    </label>\r\n                    <button className={s.button} type=\"submit\">Add contact</button>\r\n                </form>\r\n                <CSSTransition in={showAlert} timeout={250} classNames={s} unmountOnExit>\r\n                    <Notification name={newContact} />\r\n                </CSSTransition>\r\n                <CSSTransition in={showEmpty} timeout={250} classNames={s} unmountOnExit>\r\n                    <Empty />\r\n                </CSSTransition>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        contacts: contactsSelectors.getContacts(state),\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    addContact: contactsOperations.addContact,\r\n    // addToLocalStorage: contactsActions.addToLocalStorage,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react';\r\nimport { connect } from 'react-redux'\r\n// import contactsActions from '../../../redux/contacts/contactsActions';\r\nimport contactsOperations from '../../../redux/contacts/contactsOperations';\r\nimport contactsSelectors from '../../../redux/contacts/contactsSelectors';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts, deleteContact }) => {\r\n\r\n    const onHandleDelete = (e) => {\r\n        const id = e.target.dataset.id;\r\n        deleteContact(id);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>Contacts</h2>\r\n            <TransitionGroup component='ul' className={s.list}>\r\n                {contacts.map(contact => {\r\n                    return (\r\n                        <CSSTransition\r\n                            key={contact.id}\r\n                            timeout={250}\r\n                            classNames={s}>\r\n                            <li className={s.listItem}>\r\n                                <span className={s.name}>{contact.name}</span>: <span>{contact.number}</span>\r\n                                <button className={s.button} type=\"button\" data-id={contact.id} onClick={onHandleDelete}>Delete</button>\r\n                            </li>\r\n                        </CSSTransition>)\r\n                })}\r\n            </TransitionGroup>\r\n        </div>\r\n    );\r\n}\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            name: PropTypes.string,\r\n            number: PropTypes.string,\r\n        }),\r\n    ),\r\n    deleteContact: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n\r\n    contacts: contactsSelectors.getVisibleContacts(state),\r\n\r\n});\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        deleteContact: (id) => {\r\n            dispatch(contactsOperations.removeContact(id));\r\n        },\r\n\r\n        // getFiltredContacts: ({ contacts, filter }) => {\r\n        //     dispatch(contactsActions.getFiltredContacts())\r\n        // }\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport contactsActions from '../../../redux/contacts/contactsActions'\r\nimport contactsSelectors from '../../../redux/contacts/contactsSelectors';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactFilter.module.css';\r\n\r\nconst ContactFilter = ({ value, onHandleFilter }) => {\r\n\r\n    return (\r\n        <div>\r\n            <h3>Find contacts by name</h3>\r\n            <input className={s.input}\r\n                type=\"search\"\r\n                value={value}\r\n                onChange={(e) => onHandleFilter(e.target.value)}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nContactFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onHandleFilter: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    value: contactsSelectors.getFilterValue(state),\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    onHandleFilter: contactsActions.onHandleFilter,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactFilter);","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport ContactForm from './contactForm/ContactForm'\r\nimport ContactList from './contactList/ContactList';\r\nimport contactsOperations from '../../redux/contacts/contactsOperations'\r\nimport ContactFilter from './contactFilter/ContactFilter';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport s from './PhoneBook.module.css';\r\n// import Notification from './notification/Notification';\r\n// import Empty from './empty/Empty';\r\n\r\n\r\nclass PhoneBook extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onFetchContacts();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CSSTransition\r\n                    in={true}\r\n                    appear={true}\r\n                    timeout={500}\r\n                    classNames={s}\r\n                >\r\n                    <h1 className={s.title}>Phonebook</h1>\r\n                </CSSTransition>\r\n\r\n                <ContactForm />\r\n                <ContactFilter />\r\n                {/* {this.props.contacts.length > 1 &&\r\n                    <ContactFilter />\r\n                } */}\r\n                <ContactList />\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        contacts: contactsSelectors.getContacts(state),\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    onFetchContacts: contactsOperations.fetchContacts,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PhoneBook);\r\n","import React from 'react';\r\nimport './App.css';\r\nimport PhoneBook from './phoneBook/PhoneBook';\r\n\r\n\r\nconst App = () => {\r\n    return (\r\n        <PhoneBook />\r\n    );\r\n}\r\n\r\nexport default App;","import { combineReducers } from \"redux\";\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport contactsActions from './contactsActions';\r\n\r\nconst addContact = (state, action) => {\r\n    return [...state, action.payload];\r\n};\r\nconst removeContact = (state, action) => {\r\n    return state.filter(contact => contact.id.toString() !== action.payload);\r\n};\r\n\r\nconst contactList = createReducer([], {\r\n    [contactsActions.fetchContactsSuccess]: (state, action) => action.payload,\r\n    [contactsActions.addContactSuccess]: addContact,\r\n    [contactsActions.removeContactSuccess]: removeContact,\r\n    // [contactsActions.addToLocalStorage]: (_, action) => action.payload,\r\n})\r\n\r\nconst filter = createReducer(\"\", {\r\n    [contactsActions.onHandleFilter]: (_, action) => action.payload,\r\n})\r\n\r\n\r\n\r\nexport default combineReducers({\r\n    contactList,\r\n    filter,\r\n})\r\n\r\n\r\n\r\n// const contactList = (state = [], { type, payload }) => {\r\n    //     switch (type) {\r\n        //         case contactsActions.addContact.type:\r\n        //             return [...state, payload.contact];\r\n\r\n        //         case contactsActions.deleteContact.type:\r\n        //             return state.filter(contact => contact.id !== payload)\r\n\r\n        //         default:\r\n        //             return state;\r\n        //     }\r\n        // };\r\n\r\n\r\n        // const filter = (state = \"\", { type, payload }) => {\r\n        //     switch (type) {\r\n        //         case contactsActions.onHandleFilter.type:\r\n        //             return payload;\r\n\r\n        //         default:\r\n        //             return state;\r\n        //     }\r\n        // };","import contactsReducers from \"./contacts/contactsReducers\";\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: contactsReducers\r\n    }\r\n});\r\n\r\nexport default store;\r\n\r\n\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from 'react-redux';\nimport App from \"./components/App\";\nimport store from './redux/store';\nimport \"./index.css\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2n2rX\",\"label\":\"ContactForm_label__cBPHL\",\"input\":\"ContactForm_input__3u-Ln\",\"button\":\"ContactForm_button__H9Dj8\",\"enter\":\"ContactForm_enter__2TAGb\",\"enterActive\":\"ContactForm_enterActive__1K8f2\",\"exit\":\"ContactForm_exit__2x0Cz\",\"exitActive\":\"ContactForm_exitActive__LOYyt\"};"],"sourceRoot":""}